package com.drive.utility;

import java.io.ByteArrayOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import com.google.api.client.http.GenericUrl;
import com.google.api.client.http.HttpResponse;
import com.google.api.services.drive.Drive;
import com.google.api.services.drive.Drive.Files;
import com.google.api.services.drive.model.File;
import com.google.api.services.drive.model.FileList;

import com.drive.utility.database.Article;
import com.google.gson.Gson;

import android.os.Environment;

public class Utils_Drive {

	public static final String PEAK_EXTERNAL_PATH = "/PeakStocks/Data";
	
	public static final String DRIVE_FILE_NAME = "peak_database_backup";
	public static final String DRIVE_META_TITLE = "Peak Stocks Backup File";
	public static final String DRIVE_META_SUMM = "This file contains data for all databases that are used within Peak Stocks. DO NOT EDIT THIS FILE!";
	public static final String DRIVE_MIME_TYPE_TEXT = "text/plain";
	public static final String DRIVE_FILE_QUERY = "title = '" + DRIVE_META_TITLE + "'";
	
	public static java.io.File writeStringToFile(String text){
		
		FileWriter fw = null;
		java.io.File file = null;
		
		try {
			java.io.File sdCard = Environment.getExternalStorageDirectory();
			java.io.File dir = new java.io.File (sdCard.getAbsolutePath() + PEAK_EXTERNAL_PATH);
			dir.mkdirs();
			
			file = new java.io.File(dir, DRIVE_FILE_NAME);
			fw = new FileWriter(file);
            fw.write(text);
           
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if (fw != null)
					fw.close();
				if (file != null) {
					return file;
				}
			}catch (IOException e){}
		}
		return null;
	}
	
	public static InputStream getDriveStream(Drive service, File file) {
	    if (file.getDownloadUrl() != null && file.getDownloadUrl().length() > 0) {
	      try {
	        HttpResponse resp =
	            service.getRequestFactory().buildGetRequest(new GenericUrl(file.getDownloadUrl()))
	                .execute();
	        return resp.getContent();
	      } catch (IOException e) {
	        // An error occurred.
	        e.printStackTrace();
	        return null;
	      }
	    } else {
	      // The file doesn't have any content stored on Drive.
	      return null;
	    }
	  }
	
	public static String inputStreamToString(InputStream inputStream)
	        throws IOException {
	    ByteArrayOutputStream baos = new ByteArrayOutputStream();
	    byte[] buffer = new byte[1024];
	    int length = 0;
	    while ((length = inputStream.read(buffer)) != -1) {
	        baos.write(buffer, 0, length);
	    }
	    return new String(baos.toByteArray());
	}

	public static String articlesToJson(ArrayList<Article> articles){
		return new Gson().toJson(new Data_Backup(articles));
	}
	
	public static File getMetaDataFile(){
		File body = new File();
		body.setTitle(Utils_Drive.DRIVE_META_TITLE);
		body.setDescription(Utils_Drive.DRIVE_META_SUMM);
		body.setMimeType(Utils_Drive.DRIVE_MIME_TYPE_TEXT);
		return body;
	}
	
	public static List<File> retrieveRelevantFiles(Drive service) throws IOException {
	    List<File> result = new ArrayList<File>();
	    Files.List request = service.files().list().setQ(DRIVE_FILE_QUERY);

	    do {
	      try {
	        FileList files = request.execute();
	        result.addAll(files.getItems());
	        request.setPageToken(files.getNextPageToken());
	      } catch (IOException e) {
	        System.out.println("An error occurred: " + e);
	        request.setPageToken(null);
	      }
	    } while (request.getPageToken() != null &&
	             request.getPageToken().length() > 0);
	    return result;
	}

	public static Data_Backup downloadDriveFile (Drive service, File file) throws IOException {
		String json = inputStreamToString ( getDriveStream(service, file) );
		return new Gson().fromJson(json, Data_Backup.class);
	}
}
